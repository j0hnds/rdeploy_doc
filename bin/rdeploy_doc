#!/usr/bin/env ruby
#
require 'rdeploy_doc'
require 'optparse'
require 'set'
require 'erb'

options = {}

optparse = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen
  opts.banner = "Usage: rdeploy_doc [options] file"

  options[:verbose] = false
  opts.on('-v', '--verbose', "Be noisy when working") do
    options[:verbose] = true
  end

  options[:listing] = false
  opts.on('-l', '--listing', "Generate a posix-style listing of file system resources") do
    options[:listing] = true
  end

  options[:pdf] = nil
  opts.on('-p', '--pdf PRAWN_TEMPLATE', "Generate a PDF document") do | prawn_template |
    options[:pdf] = prawn_template
  end

  options[:outfile] = nil
  opts.on('-o', '--output OUTPUT_FILE', "Specify the path to the output file") do | output_file |
    options[:outfile] = output_file
  end

  options[:template] = nil
  opts.on('-t', '--template FILE', "Use the specified ERB template to create output") do |file|
    options[:template] = file
  end

  opts.on('-h', '--help', "Display the usage message") do
    puts opts
    exit
  end
end

# Parse the command line
optparse.parse!

if options[:verbose]
  puts "Verbose: true"
  puts "Listing: #{options[:listing]}"
end

if options[:pdf]
  ( puts "Invalid PDF template file specified: #{options[:pdf]}"; exit ) if !File.exists?(options[:pdf])
  ( puts "Must specify an output file when generating a PDF"; exit ) if options[:outfile].nil?
end

( puts "Unable to write output file: #{options[:outfile]}"; exit ) if options[:outfile] and !File.writable?(File.dirname(options[:outfile]))

( puts "Must specify a file to process."; exit ) if ARGV.empty?

file_to_process = ARGV.first

( puts "File does not exist: #{file_to_process}"; exit ) if !File.exists?(file_to_process)

include RDeployDoc

File.open(file_to_process, "r") { |f| eval(f.read) }

if options[:template]
  template_file = options[:template]
  ( puts "Unable to open template file: #{template_file}"; exit ) if !File.exists?(template_file)
  render_erb_template(template_file, options[:outfile])
elsif options[:pdf]
  render_prawn_template(options[:pdf], options[:outfile])
elsif options[:listing]
  puts "All directories"
  listed_paths = Set.new
  apply_to_directories do |d|
    if !listed_paths.member?(d)
      puts d.path
      puts d.to_posix
      listed_paths << d
      # List any children of the path
      d.children.each do |c|
        next unless c.is_a?(FileSystemResource)
        next if listed_paths.member?(c)
        puts c.to_posix
        listed_paths << d
      end
    end
  end
end
